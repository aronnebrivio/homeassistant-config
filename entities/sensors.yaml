- platform: influxdb
  api_version: 2
  ssl: false
  host: !secret influxdb.ip
  port: !secret influxdb.port
  token: !secret influxdb.token
  organization: !secret influxdb.organization_id
  bucket: !secret influxdb.bucket
  queries_flux:
    # Proxmox CPU load
    - name: proxmox.raw_cpu_usage
      group_function: mean
      range_start: -5m
      query: >
        filter(fn: (r) => r._measurement == "cpustat")
        |> filter(fn: (r) => r._field == "cpu")
        |> map(fn: (r) => ({_time: r._time, _value: r._value * 100.0}))
      unit_of_measurement: "%"
      value_template: "{{ value | float }}"
    # Proxmox memory usage
    - name: proxmox.raw_memory_usage
      group_function: last
      range_start: -5m
      query: >
        filter(fn: (r) => r._measurement == "memory" and r._field == "memused")
        |> map(fn: (r) => ({r with _value: float(v: r._value) / 1073741824.0}))
      unit_of_measurement: "GB"
      value_template: "{{ value | float }}"
    # Proxmox storage usage
    - name: proxmox.raw_storage_usage
      group_function: mean
      range_start: -5m
      query: >
        filter(fn: (r) => r._measurement == "system")
        |> filter(fn: (r) => r._field == "used")
      unit_of_measurement: "GB"
      value_template: "{{ value | float }}"
    # Proxmox storage total
    - name: proxmox.raw_storage_total
      group_function: mean
      range_start: -5m
      query: >
        filter(fn: (r) => r._measurement == "system")
        |> filter(fn: (r) => r._field == "total")
      unit_of_measurement: "GB"
      value_template: "{{ value | float }}"
# Proxmox
- platform: template
  sensors:
    # CPU Usage
    proxmox_cpu_usage:
      unit_of_measurement: "%"
      value_template: "{{ '%.2f' | format(states('sensor.proxmox_raw_cpu_usage') | float ) }}"
      friendly_name: "Proxmox CPU Usage"
    # Memory Usage
    proxmox_memory_usage:
      unit_of_measurement: "GB"
      value_template: "{{ '%.2f' | format(states('sensor.proxmox_raw_memory_usage') | float ) }}"
      friendly_name: "Proxmox Memory Usage"
    # Storage Usage
    proxmox_storage_usage:
      unit_of_measurement: "%"
      value_template: "{{ '%.2f' | format((states('sensor.proxmox_raw_storage_usage') | float / states('sensor.proxmox_raw_storage_total') | float) * 100) }}"
      friendly_name: "Proxmox Storage Usage"
# Temperature/Humidity
- platform: template
  sensors:
    # Home temperature
    home_temperature:
      unit_of_measurement: "°C"
      value_template: >-
        {% set sensors = [
          'sensor.termometro_sala_temperature',
          'sensor.termometro_camera_temperature',
          'sensor.termometro_cucina_temperature',
          'sensor.termometro_bagno_temperature',
          'sensor.termometro_ingresso_temperature'
        ] %}
        {% set temps = namespace(valid=[], count=0) %}
        {% for sensor in sensors %}
          {% if states(sensor) not in ['unknown', 'unavailable', 'none'] %}
            {% set temps.valid = temps.valid + [states(sensor) | float] %}
            {% set temps.count = temps.count + 1 %}
          {% endif %}
        {% endfor %}
        {{ '%.1f' | format((temps.valid | sum / temps.count) if temps.count > 0 else 'unavailable') }}
      friendly_name: "Home Temperature"
      icon_template: mdi:thermometer
    # Home humidity
    home_humidity:
      unit_of_measurement: "%"
      value_template: >-
        {% set sensors = [
          'sensor.termometro_sala_humidity',
          'sensor.termometro_camera_humidity',
          'sensor.termometro_cucina_humidity',
          'sensor.termometro_bagno_humidity',
          'sensor.termometro_ingresso_humidity'
        ] %}
        {% set humidity = namespace(valid=[], count=0) %}
        {% for sensor in sensors %}
          {% if states(sensor) not in ['unknown', 'unavailable', 'none'] %}
            {% set humidity.valid = humidity.valid + [states(sensor) | float] %}
            {% set humidity.count = humidity.count + 1 %}
          {% endif %}
        {% endfor %}
        {{ '%.1f' | format((humidity.valid | sum / humidity.count) if humidity.count > 0 else 'unavailable') }}
      friendly_name: "Home Humidity"
      icon_template: mdi:water-percent
    # External temperature
    weather_temperature:
      friendly_name: "Weather Temperature"
      unit_of_measurement: "°C"
      value_template: "{{ state_attr('weather.casa', 'temperature') }}"
    # External humidity
    weather_humidity:
      friendly_name: "Weather Humidity"
      unit_of_measurement: '%'
      value_template: "{{ state_attr('weather.casa', 'humidity') }}"
# Garbage collection
- platform: waste_collection_schedule
  name: garbage_collection_trash
  add_days_to: true
  value_template: 'Tra {{value.daysTo}} giorni'
  types:
    - Indifferenziato
- platform: waste_collection_schedule
  name: garbage_collection_organic
  add_days_to: true
  value_template: 'Tra {{value.daysTo}} giorni'
  types:
    - Organico
- platform: waste_collection_schedule
  name: garbage_collection_glass_and_metal
  add_days_to: true
  value_template: 'Tra {{value.daysTo}} giorni'
  types:
    - Vetro e Metallo
- platform: waste_collection_schedule
  name: garbage_collection_paper
  add_days_to: true
  value_template: 'Tra {{value.daysTo}} giorni'
  types:
    - Carta
- platform: waste_collection_schedule
  name: garbage_collection_plastic
  add_days_to: true
  value_template: 'Tra {{value.daysTo}} giorni'
  types:
    - Plastica
# Mold indicator
- platform: mold_indicator
  indoor_temp_sensor: sensor.home_temperature
  indoor_humidity_sensor: sensor.home_humidity
  outdoor_temp_sensor: sensor.weather_temperature
  calibration_factor: 1.364
# Date and Time
- platform: time_date
  display_options:
    - 'time'
    - 'date'
    - 'date_time'
    - 'date_time_utc'
    - 'date_time_iso'
    - 'time_date'
    - 'time_utc'
# Indoor AQI
- platform: statistics
  unique_id: pm25_24hr_avg
  name: "PM2.5 24-hour Average"
  entity_id: sensor.esp32_01_particulate_matter_2_5_m_concentration
  state_characteristic: mean
  max_age:
    hours: 24
- platform: template
  sensors:
    indoor_aqi:
      friendly_name: "Indoor AQI"
      icon_template: mdi:chemical-weapon
      device_class: aqi
      unit_of_measurement: AQI
      value_template: >
        {% macro aqi(val, val_l, val_h, aqi_l, aqi_h) -%}
          {{(((aqi_h-aqi_l)/(val_h - val_l) * (val - val_l)) + aqi_l)|round(0)}}
        {%- endmacro %}
        {% set v = states('sensor.esp32_01_particulate_matter_2_5_m_concentration')|round(1) %}
        {% if v <= 12.0 %}
          {{aqi(v, 0, 12.0, 0, 50)}}
        {% elif 12.0 < v <= 35.4 %}
          {{aqi(v, 12.1, 35.4, 51, 100)}}
        {% elif 35.4 < v <= 55.4 %}
          {{aqi(v, 35.5, 55.4, 101, 150)}}
        {% elif 55.4 < v <= 150.5 %}
          {{aqi(v, 55.5, 150.4, 151, 200)}}
        {% elif 150.4 < v <= 250.4 %}
          {{aqi(v, 150.4, 250.4, 201, 300)}}
        {% elif 250.5 < v <= 500.4 %}
          {{aqi(v, 250.5, 500.4, 301, 500)}}
        {% else %}
          500
        {% endif %}
